{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.2", "generated_at": "2024-09-19T14:40:19.362535Z", "invocation_id": "0851f17f-a1e3-459e-896c-be29392ccff2", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.279920Z", "completed_at": "2024-09-19T14:40:19.303114Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.304321Z", "completed_at": "2024-09-19T14:40:19.304329Z"}], "thread_id": "Thread-1", "execution_time": 0.029505014419555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.base_all_nasdaq_stock_history", "compiled": true, "compiled_code": "select\t\n    -- int64_field_0\n    Date as date\n    , Open as open\n    , High as high\n    , Low as low\n    , Close as close_last\n    , 'Adj Close' as adj_close\n    , Volume as volume\n    , Symbol as symbol\n    , '2024-09-16' as etl_date\nfrom `first-project-262802`.`stock`.`all_nasdaq_stock_history`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_all_nasdaq_stock_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.296968Z", "completed_at": "2024-09-19T14:40:19.303593Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.305179Z", "completed_at": "2024-09-19T14:40:19.305183Z"}], "thread_id": "Thread-5", "execution_time": 0.027135133743286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.base_spus_2019_2024", "compiled": true, "compiled_code": "select \n  date\n  , close_last\n  , adj_close\n  , volume\n  , open\n  , high\n  , low\nfrom `first-project-262802`.`stock`.`spus_2019_2024`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_spus_2019_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.288789Z", "completed_at": "2024-09-19T14:40:19.303829Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.305733Z", "completed_at": "2024-09-19T14:40:19.305737Z"}], "thread_id": "Thread-2", "execution_time": 0.029772043228149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.base_all_nasdaq_stock_info", "compiled": true, "compiled_code": "select\n    -- int64_field_0\n    index\n    , address1\n    , address2\n    , city\n    , zip\n    , country\n    , phone\n    , fax\n    , website\n    , industry\n    , industryKey\n    , industryDisp\n    , sector\n    , sectorKey\n    , sectorDisp\n    , longBusinessSummary\n    , fullTimeEmployees\n    , companyOfficers\n    , compensationAsOfEpochDate\n    , irWebsite\n    , maxAge\n    , priceHint\n    , previousClose\n    , open as open_price_from_stock_info\n    , dayLow\n    , dayHigh\n    , regularMarketPreviousClose\n    , regularMarketOpen\n    , regularMarketDayLow\n    , regularMarketDayHigh\n    , exDividendDate\n    , beta\n    , forwardPE\n    , volume as volume_from_stock_info\n    , regularMarketVolume\n    , averageVolume\n    , averageVolume10days\n    , averageDailyVolume10Day\n    , marketCap\n    , fiftyTwoWeekLow\n    , fiftyTwoWeekHigh\n    , priceToSalesTrailing12Months\n    , fiftyDayAverage\n    , twoHundredDayAverage\n    , currency\n    , enterpriseValue\n    , profitMargins\n    , floatShares\n    , sharesOutstanding\n    , sharesShort\n    , sharesShortPriorMonth\n    , sharesShortPreviousMonthDate\n    , dateShortInterest\n    , heldPercentInsiders\n    , heldPercentInstitutions\n    , shortRatio\n    , shortPercentOfFloat\n    , impliedSharesOutstanding\n    , bookValue\n    , priceToBook\n    , lastFiscalYearEnd\n    , nextFiscalYearEnd\n    , mostRecentQuarter\n    , netIncomeToCommon\n    , trailingEps\n    , forwardEps\n    , enterpriseToRevenue\n    , enterpriseToEbitda\n    -- , 52WeekChange\n    -- , SandP52WeekChange\n    , lastDividendValue\n    , lastDividendDate\n    , exchange\n    , quoteType\n    , symbol\n    , underlyingSymbol\n    , shortName\n    , longName\n    , firstTradeDateEpochUtc\n    , timeZoneFullName\n    , timeZoneShortName\n    , uuid\n    , messageBoardId\n    , gmtOffSetMilliseconds\n    , currentPrice\n    , recommendationMean\n    , recommendationKey\n    , totalCash\n    , totalCashPerShare\n    , ebitda\n    , totalDebt\n    , quickRatio\n    , currentRatio\n    , totalRevenue\n    , debtToEquity\n    , revenuePerShare\n    , returnOnAssets\n    , returnOnEquity\n    , revenueGrowth\n    , grossMargins\n    , ebitdaMargins\n    , operatingMargins\n    , financialCurrency\n    , trailingPegRatio\n    , state\n    , auditRisk\n    , boardRisk\n    , compensationRisk\n    , shareHolderRightsRisk\n    , overallRisk\n    , governanceEpochDate\n    , bid\n    , ask\n    , bidSize\n    , askSize\n    , sharesPercentSharesOut\n    , lastSplitFactor\n    , lastSplitDate\n    , targetHighPrice\n    , targetLowPrice\n    , targetMeanPrice\n    , targetMedianPrice\n    , numberOfAnalystOpinions\n    , freeCashflow\n    , operatingCashflow\n    , fiveYearAvgDividendYield\n    , earningsQuarterlyGrowth\n    , pegRatio\n    , earningsGrowth\n    , dividendRate\n    , dividendYield\n    , payoutRatio\n    , trailingAnnualDividendRate\n    , trailingAnnualDividendYield\n    , trailingPE\n    , grossProfits\n    , ETL_Date\nfrom `first-project-262802`.`stock`.`all_nasdaq_stock_info`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_all_nasdaq_stock_info`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.298989Z", "completed_at": "2024-09-19T14:40:19.304098Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.306092Z", "completed_at": "2024-09-19T14:40:19.306095Z"}], "thread_id": "Thread-6", "execution_time": 0.02724599838256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.base_spy_1993_2024", "compiled": true, "compiled_code": "select \n  date\n  , close_last\n  , adj_close\n  , volume\n  , open\n  , high\n  , low\nfrom `first-project-262802`.`stock`.`spy_1993_2024`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_spy_1993_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.294997Z", "completed_at": "2024-09-19T14:40:19.304785Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.306560Z", "completed_at": "2024-09-19T14:40:19.306563Z"}], "thread_id": "Thread-4", "execution_time": 0.028827905654907227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.base_hlal_2019_2024", "compiled": true, "compiled_code": "select \n  date\n  , close_last\n  , adj_close\n  , volume\n  , open\n  , high\n  , low\nfrom `first-project-262802`.`stock`.`hlal`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_hlal_2019_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.292927Z", "completed_at": "2024-09-19T14:40:19.304993Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.306914Z", "completed_at": "2024-09-19T14:40:19.306917Z"}], "thread_id": "Thread-3", "execution_time": 0.02984023094177246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.base_calendar", "compiled": true, "compiled_code": "select \n    is_workday\n    , is_holiday\n    , is_holiday_leave\n    , a_date\n    , a_date as date\n    , extract(year from a_date) as year_of_date\n    , extract(month from a_date) as month_of_date\n    , extract(day from a_date) as day_of_date\n    , day_full\n    , day_full_capital_case\n    , day_full_lower_case\n    , day_abbrev\n    , is_weekday\n    , is_weekday_by_regex\n    , day_of_week\n    , day_of_month\n    , day_of_year\n    , week_of_month\n    , format_date('%W', a_date) as week_number\n    , trim(month_full) as month_full\n    , lower(trim(month_full)) as month_full_lower_case\n    , month_abbrev\n    , month_number\n    , quarter\n    , year_short\n    , year_full\n    , fiscal_quarter\n    , fiscal_year\n    , fiscal_year_full\n    , tomorrow\n    , one_week_later\n    , one_month_later\n    , three_months_later\n    , one_year_later\nfrom `first-project-262802`.`stock`.`400_years_of_generated_dates_and_holidays`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_calendar`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.300838Z", "completed_at": "2024-09-19T14:40:19.305537Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.307324Z", "completed_at": "2024-09-19T14:40:19.307327Z"}], "thread_id": "Thread-7", "execution_time": 0.02806568145751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.base_symbols_meta", "compiled": true, "compiled_code": "select \n    'Nasdaq Traded' as is_nasdaq_traded\n    , 'Symbol' as symbol\n    , 'Security Name' as security_name\n    , 'Listing Exchange' as listing_exchange\n    , 'Market Category' as market_category\n    , 'ETF' as is_ETF\n    , 'Round Lot Size' as round_lot_size\n    , 'Test Issue' as is_test_issue\n    , 'Financial Status' as financial_status\n    , 'CQS Symbol' as cqs_symbol\n    , 'NASDAQ Symbol' as nasdaq_symbol\n    , 'NextShares' as nextshares\nfrom `first-project-262802`.`stock`.`symbols_valid_meta`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_symbols_meta`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.309082Z", "completed_at": "2024-09-19T14:40:19.316307Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.316562Z", "completed_at": "2024-09-19T14:40:19.316566Z"}], "thread_id": "Thread-9", "execution_time": 0.008394956588745117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_all_nasdaq_stock_info", "compiled": true, "compiled_code": "with \n\nbase as ( select * from `first-project-262802`.`stock_analysis`.`base_all_nasdaq_stock_info` )\n\nselect\n    distinct \n    *\nfrom base\nwhere index = 0", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_all_nasdaq_stock_info`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.314591Z", "completed_at": "2024-09-19T14:40:19.317030Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.317398Z", "completed_at": "2024-09-19T14:40:19.317401Z"}], "thread_id": "Thread-12", "execution_time": 0.006321907043457031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_symbols_meta", "compiled": true, "compiled_code": "with \n\nsymbols_meta as ( select * from `first-project-262802`.`stock_analysis`.`base_symbols_meta` )\n\nselect \n    symbol\n    , security_name\n    , listing_exchange\n    , market_category\n    , is_ETF\nfrom symbols_meta", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_symbols_meta`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.311870Z", "completed_at": "2024-09-19T14:40:19.317219Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.317734Z", "completed_at": "2024-09-19T14:40:19.317737Z"}], "thread_id": "Thread-11", "execution_time": 0.0069119930267333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_calendar", "compiled": true, "compiled_code": "with \n\nbase_calendar as (select * from `first-project-262802`.`stock_analysis`.`base_calendar` )\n\n, adding_month_start_and_end as \n(\n    select\n        *\n        , case when day_of_date = 1 then TRUE else FALSE end as is_month_start\n        , case \n            when ( month_full = 'January' or month_full =  'March' or month_full = 'May' or month_full = 'July'or month_full = 'August' or month_full = 'October' or month_full = 'December') and day_of_date = 31 then TRUE \n            when ( month_full = 'April' or month_full =  'June' or month_full = 'September' or month_full = 'November' ) and day_of_date = 30 then TRUE \n            when month_full = 'February' and ( day_of_date = 28 or day_of_date = 29 ) then TRUE \n            else FALSE \n        end as is_month_end   \n    from base_calendar\n)\n\n, adding_quarter_start_and_end as \n(\n    select\n        *\n        , case \n            when ( month_full = 'January' or month_full =  'April' or month_full = 'July' or month_full = 'October') and is_month_start = TRUE then TRUE\n            else False\n        end as is_quarter_start\n        , case \n            when ( month_full = 'March' or month_full =  'June' or month_full = 'September' or month_full = 'December') and is_month_end = TRUE then TRUE\n            else False\n        end as is_quarter_end    \n    from adding_month_start_and_end\n)\n\n, adding_week_start_and_end as \n(\n    select\n        *\n        , case \n            when day_of_week = 1 then TRUE\n            else False\n        end as is_week_start\n        , case \n            when day_of_week = 7 then TRUE\n            else False\n        end as is_week_end\n        , case \n            when day_of_week = 1 then TRUE\n            else False\n        end as is_typical_trading_week_start\n        , case \n            when day_of_week = 5 then TRUE\n            else False\n        end as is_typical_trading_week_end\n    from adding_quarter_start_and_end\n)\n\n, base as (select * from adding_week_start_and_end )\n\n, adding_first_working_day_of_year as \n(\n    select\n        TRUE as is_first_working_day_of_year\n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date asc) = 1\n)\n\n, adding_last_working_day_of_year as \n(\n    select\n        TRUE as is_last_working_day_of_year\n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date desc) = 1\n)\n\n, adding_first_working_day_of_month as \n(\n    select\n        TRUE as is_first_working_day_of_month \n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_of_date ORDER BY date asc) = 1\n)\n\n, adding_last_working_day_of_month as \n(\n    select\n        TRUE as is_last_working_day_of_month \n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_of_date ORDER BY date desc) = 1\n)\n\n, adding_first_working_day_of_week as \n(\n    select\n        TRUE as is_first_working_day_of_week\n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_of_date, week_of_month ORDER BY date asc) = 1\n)\n\n, adding_last_working_day_of_week as \n(\n    select\n        TRUE as is_last_working_day_of_week\n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_of_date, week_of_month ORDER BY date desc) = 1\n)\n\n\nselect \n    base.*\n\n    , concat(base.year_full,'-',base.week_number) as year_week\n    , concat(base.year_full,'-',base.month_abbrev,'-',base.week_number) as year_month_week\n    , concat(base.year_full,'-',base.month_abbrev) as year_month\n\n    , case when adding_first_working_day_of_year.is_first_working_day_of_year = TRUE then TRUE else FALSE end as is_first_working_day_of_year\n    , case when adding_last_working_day_of_year.is_last_working_day_of_year = TRUE then TRUE else FALSE end as is_last_working_day_of_year \n    \n    , case when adding_first_working_day_of_month.is_first_working_day_of_month = TRUE then TRUE else FALSE end as is_first_working_day_of_month\n    , case when adding_last_working_day_of_month.is_last_working_day_of_month = TRUE then TRUE else FALSE end as is_last_working_day_of_month\n    \n    , case when adding_first_working_day_of_week.is_first_working_day_of_week = TRUE then TRUE else FALSE end as is_first_working_day_of_week\n    , case when adding_last_working_day_of_week.is_last_working_day_of_week = TRUE then TRUE else FALSE end as is_last_working_day_of_week\n\nfrom base\nleft join adding_first_working_day_of_year using (date)\nleft join adding_last_working_day_of_year using (date)\nleft join adding_first_working_day_of_month using (date)\nleft join adding_last_working_day_of_month using (date)\nleft join adding_first_working_day_of_week using (date)\nleft join adding_last_working_day_of_week using (date)", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_calendar`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.320575Z", "completed_at": "2024-09-19T14:40:19.328977Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.329196Z", "completed_at": "2024-09-19T14:40:19.329200Z"}], "thread_id": "Thread-14", "execution_time": 0.010376930236816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_hlal_2019_2024", "compiled": true, "compiled_code": "with \n\nstock as ( select * from `first-project-262802`.`stock_analysis`.`base_hlal_2019_2024` )\n\n, calendar as ( select * from `first-project-262802`.`stock_analysis`.`stg_calendar` )\n\n, base as \n(\n    select \n        *\n        , round(((open + close_last + high + low)/4.00),2) as avg_daily_price\n    from stock\n    left join calendar using (date)\n)\n\n, weekly_price as \n(\n    select \n        year_full\n        , week_number\n        , round(avg(avg_daily_price),2) as avg_weekly_price\n        , round(sum(volume)/7) as avg_weekly_volume\n    from base\n    group by 1,2\n)\n\n, monthly_price as \n(\n    select \n        year_full\n        , month_number\n        , round(avg(avg_daily_price),2) as avg_monthly_price\n    from base\n    group by 1,2\n)\n\n, yearly_price as \n(\n    select \n        year_full\n        , round(avg(avg_daily_price),2) as avg_yearly_price\n    from base\n    group by 1\n)\n\n\n\n\n, first_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_week as \n(\n    select\n        year_full\n        , week_number\n        , round(avg_daily_price_week_end - avg_daily_price_week_start,2) as avg_daily_price_movement_in_week\n        , round(((avg_daily_price_week_end/avg_daily_price_week_start)-1)*100.00,2) as avg_daily_price_movement_in_week_pct\n    from base\n    left join first_avg_daily_price_per_week using (year_full,week_number)\n    left join last_avg_daily_price_per_week using (year_full,week_number)\n)\n\n\n\n\n, first_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_month as \n(\n    select\n        year_full\n        , month_number\n        , round(avg_daily_price_month_end - avg_daily_price_month_start,2) as avg_daily_price_movement_in_month\n        , round(((avg_daily_price_month_end/avg_daily_price_month_start)-1)*100.00,2) as avg_daily_price_movement_in_month_pct\n    from base\n    left join first_avg_daily_price_per_month using (year_full,month_number)\n    left join last_avg_daily_price_per_month using (year_full,month_number)\n)\n\n\n\n\n\n\n, first_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_year as \n(\n    select\n        year_full\n        , round(avg_daily_price_year_end - avg_daily_price_year_start,2) as avg_daily_price_movement_in_year\n        , round(((avg_daily_price_year_end/avg_daily_price_year_start)-1)*100.00,2) as avg_daily_price_movement_in_year_pct\n    from base\n    left join first_avg_daily_price_per_year using (year_full)\n    left join last_avg_daily_price_per_year using (year_full)\n)\n\n\n\n\nselect\n    distinct *\nfrom base\nleft join weekly_price using (year_full,week_number)\nleft join monthly_price using (year_full,month_number)\nleft join yearly_price using (year_full)\nleft join daily_price_movement_in_week using (year_full,week_number)\nleft join daily_price_movement_in_month using (year_full,month_number)\nleft join daily_price_movement_in_year using (year_full)", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_hlal_2019_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.324628Z", "completed_at": "2024-09-19T14:40:19.329645Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.330167Z", "completed_at": "2024-09-19T14:40:19.330170Z"}], "thread_id": "Thread-16", "execution_time": 0.01063680648803711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_spus_2019_2024", "compiled": true, "compiled_code": "-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- --   DEPRACATED   -- -- -- -- --\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n\n\nwith \n\nstock as ( select * from `first-project-262802`.`stock_analysis`.`base_spus_2019_2024` )\n\n, calendar as ( select * from `first-project-262802`.`stock_analysis`.`stg_calendar` )\n\n, base as \n(\n    select \n        *\n        , round(((open + close_last + high + low)/4.00),2) as avg_daily_price\n    from stock\n    left join calendar using (date)\n)\n\n, weekly_price as \n(\n    select \n        year_full\n        , week_number\n        , round(avg(avg_daily_price),2) as avg_weekly_price\n        , round(sum(volume)/7) as avg_weekly_volume\n    from base\n    group by 1,2\n)\n\n, monthly_price as \n(\n    select \n        year_full\n        , month_number\n        , round(avg(avg_daily_price),2) as avg_monthly_price\n    from base\n    group by 1,2\n)\n\n, yearly_price as \n(\n    select \n        year_full\n        , round(avg(avg_daily_price),2) as avg_yearly_price\n    from base\n    group by 1\n)\n\n\n\n\n, first_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_week as \n(\n    select\n        year_full\n        , week_number\n        , round(avg_daily_price_week_end - avg_daily_price_week_start,2) as avg_daily_price_movement_in_week\n        , round(((avg_daily_price_week_end/avg_daily_price_week_start)-1)*100.00,2) as avg_daily_price_movement_in_week_pct\n    from base\n    left join first_avg_daily_price_per_week using (year_full,week_number)\n    left join last_avg_daily_price_per_week using (year_full,week_number)\n)\n\n\n\n\n, first_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_month as \n(\n    select\n        year_full\n        , month_number\n        , round(avg_daily_price_month_end - avg_daily_price_month_start,2) as avg_daily_price_movement_in_month\n        , round(((avg_daily_price_month_end/avg_daily_price_month_start)-1)*100.00,2) as avg_daily_price_movement_in_month_pct\n    from base\n    left join first_avg_daily_price_per_month using (year_full,month_number)\n    left join last_avg_daily_price_per_month using (year_full,month_number)\n)\n\n\n\n\n\n\n, first_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_year as \n(\n    select\n        year_full\n        , round(avg_daily_price_year_end - avg_daily_price_year_start,2) as avg_daily_price_movement_in_year\n        , round(((avg_daily_price_year_end/avg_daily_price_year_start)-1)*100.00,2) as avg_daily_price_movement_in_year_pct\n    from base\n    left join first_avg_daily_price_per_year using (year_full)\n    left join last_avg_daily_price_per_year using (year_full)\n)\n\n\n\n\nselect\n    distinct *\nfrom base\nleft join weekly_price using (year_full,week_number)\nleft join monthly_price using (year_full,month_number)\nleft join yearly_price using (year_full)\nleft join daily_price_movement_in_week using (year_full,week_number)\nleft join daily_price_movement_in_month using (year_full,month_number)\nleft join daily_price_movement_in_year using (year_full)", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_spus_2019_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.326772Z", "completed_at": "2024-09-19T14:40:19.329838Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.330486Z", "completed_at": "2024-09-19T14:40:19.330490Z"}], "thread_id": "Thread-17", "execution_time": 0.01058816909790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_spy_1993_2024", "compiled": true, "compiled_code": "with \n\nstock as ( select * from `first-project-262802`.`stock_analysis`.`base_spy_1993_2024` )\n\n, calendar as ( select * from `first-project-262802`.`stock_analysis`.`stg_calendar` )\n\n, base as \n(\n    select \n        *\n        , round(((open + close_last + high + low)/4.00),2) as avg_daily_price\n    from stock\n    left join calendar using (date)\n)\n\n, weekly_price as \n(\n    select \n        year_full\n        , week_number\n        , round(avg(avg_daily_price),2) as avg_weekly_price\n        , round(sum(volume)/7) as avg_weekly_volume\n    from base\n    group by 1,2\n)\n\n, monthly_price as \n(\n    select \n        year_full\n        , month_number\n        , round(avg(avg_daily_price),2) as avg_monthly_price\n    from base\n    group by 1,2\n)\n\n, yearly_price as \n(\n    select \n        year_full\n        , round(avg(avg_daily_price),2) as avg_yearly_price\n    from base\n    group by 1\n)\n\n\n\n\n, first_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_week as \n(\n    select\n        year_full\n        , week_number\n        , round(avg_daily_price_week_end - avg_daily_price_week_start,2) as avg_daily_price_movement_in_week\n        , round(((avg_daily_price_week_end/avg_daily_price_week_start)-1)*100.00,2) as avg_daily_price_movement_in_week_pct\n    from base\n    left join first_avg_daily_price_per_week using (year_full,week_number)\n    left join last_avg_daily_price_per_week using (year_full,week_number)\n)\n\n\n\n\n, first_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_month as \n(\n    select\n        year_full\n        , month_number\n        , round(avg_daily_price_month_end - avg_daily_price_month_start,2) as avg_daily_price_movement_in_month\n        , round(((avg_daily_price_month_end/avg_daily_price_month_start)-1)*100.00,2) as avg_daily_price_movement_in_month_pct\n    from base\n    left join first_avg_daily_price_per_month using (year_full,month_number)\n    left join last_avg_daily_price_per_month using (year_full,month_number)\n)\n\n\n\n\n\n\n, first_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_year as \n(\n    select\n        year_full\n        , round(avg_daily_price_year_end - avg_daily_price_year_start,2) as avg_daily_price_movement_in_year\n        , round(((avg_daily_price_year_end/avg_daily_price_year_start)-1)*100.00,2) as avg_daily_price_movement_in_year_pct\n    from base\n    left join first_avg_daily_price_per_year using (year_full)\n    left join last_avg_daily_price_per_year using (year_full)\n)\n\n\n\n\nselect\n    distinct *\nfrom base\nleft join weekly_price using (year_full,week_number)\nleft join monthly_price using (year_full,month_number)\nleft join yearly_price using (year_full)\nleft join daily_price_movement_in_week using (year_full,week_number)\nleft join daily_price_movement_in_month using (year_full,month_number)\nleft join daily_price_movement_in_year using (year_full)", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_spy_1993_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.322869Z", "completed_at": "2024-09-19T14:40:19.330001Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.330860Z", "completed_at": "2024-09-19T14:40:19.330863Z"}], "thread_id": "Thread-15", "execution_time": 0.011566162109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_nasdaq_history_base", "compiled": true, "compiled_code": "with \n\nstock as ( select * from `first-project-262802`.`stock_analysis`.`base_all_nasdaq_stock_history` )\n\n, calendar as ( select * from `first-project-262802`.`stock_analysis`.`stg_calendar` )\n\n, base as \n(\n    select \n        *\n        , round(((open + close_last + high + low)/4.00),2) as avg_daily_price\n    from stock\n    left join calendar using (date)\n)\n\nselect * from base", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_nasdaq_history_base`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.333442Z", "completed_at": "2024-09-19T14:40:19.340906Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.341148Z", "completed_at": "2024-09-19T14:40:19.341153Z"}], "thread_id": "Thread-19", "execution_time": 0.009449958801269531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_nasdaq_history_weekly_monthly_yearly_price", "compiled": true, "compiled_code": "with \n\nbase as ( select * from `first-project-262802`.`stock_analysis`.`stg_nasdaq_history_base` )\n\n, weekly_price as \n(\n    select \n        year_full\n        , week_number\n        , symbol\n        , round(avg(avg_daily_price),2) as avg_weekly_price\n        , round(sum(nullif(volume,0))/7) as avg_weekly_volume\n    from base\n    group by 1,2,3\n)\n\n, monthly_price as \n(\n    select \n        year_full\n        , month_number\n        , symbol\n        , round(avg(avg_daily_price),2) as avg_monthly_price\n    from base\n    group by 1,2,3\n)\n\n, yearly_price as \n(\n    select \n        year_full\n        , symbol\n        , round(avg(avg_daily_price),2) as avg_yearly_price\n    from base\n    group by 1,2\n)\n\n\n\n\n\n\n\n\nselect\n    distinct *\nfrom base\nleft join weekly_price using (year_full, week_number, symbol)\nleft join monthly_price using (year_full, month_number, symbol)\nleft join yearly_price using (year_full, symbol)", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_nasdaq_history_weekly_monthly_yearly_price`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.335429Z", "completed_at": "2024-09-19T14:40:19.341594Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.342110Z", "completed_at": "2024-09-19T14:40:19.342113Z"}], "thread_id": "Thread-20", "execution_time": 0.009757280349731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_nasdaq_monthly_price_movement", "compiled": true, "compiled_code": "with \n\nbase as ( select * from `first-project-262802`.`stock_analysis`.`stg_nasdaq_history_base` )\n\n, first_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , symbol\n        , avg_daily_price as avg_daily_price_month_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number, symbol ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , symbol\n        , avg_daily_price as avg_daily_price_month_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number, symbol ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_month as \n(\n    select\n        year_full\n        , month_number\n        , symbol\n        , round(avg_daily_price_month_end - avg_daily_price_month_start,2) as avg_daily_price_movement_in_month\n        , round(((nullif(avg_daily_price_month_end,0)/nullif(avg_daily_price_month_start,0))-1)*100.00,2) as avg_daily_price_movement_in_month_pct\n    from base\n    left join first_avg_daily_price_per_month using (year_full, month_number, symbol)\n    left join last_avg_daily_price_per_month using (year_full, month_number, symbol)\n)\n\n\n\n\n\n\n-- select\n--     distinct *\n-- from base\n-- left join daily_price_movement_in_month using (year_full, month_number, symbol)\n\nselect * from daily_price_movement_in_month", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_nasdaq_monthly_price_movement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.339325Z", "completed_at": "2024-09-19T14:40:19.341775Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.342426Z", "completed_at": "2024-09-19T14:40:19.342429Z"}], "thread_id": "Thread-22", "execution_time": 0.009435892105102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_nasdaq_yearly_price_movement", "compiled": true, "compiled_code": "with \n\nbase as ( select * from `first-project-262802`.`stock_analysis`.`stg_nasdaq_history_base` )\n\n, first_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , symbol\n        , avg_daily_price as avg_daily_price_year_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, symbol ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , symbol\n        , avg_daily_price as avg_daily_price_year_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, symbol ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_year as \n(\n    select\n        year_full\n        , symbol\n        , round(avg_daily_price_year_end - avg_daily_price_year_start,2) as avg_daily_price_movement_in_year\n        , round(((nullif(avg_daily_price_year_end,0)/nullif(avg_daily_price_year_start,0))-1)*100.00,2) as avg_daily_price_movement_in_year_pct\n    from base\n    left join first_avg_daily_price_per_year using (year_full, symbol)\n    left join last_avg_daily_price_per_year using (year_full, symbol)\n)\n\n\n\n\n\n\n\n\n\n-- select\n--     distinct *\n-- from base\n-- left join daily_price_movement_in_year using (year_full, symbol)\n\nselect * from daily_price_movement_in_year", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_nasdaq_yearly_price_movement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.337710Z", "completed_at": "2024-09-19T14:40:19.341949Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.342753Z", "completed_at": "2024-09-19T14:40:19.342755Z"}], "thread_id": "Thread-21", "execution_time": 0.009986162185668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_nasdaq_weekly_price_movement", "compiled": true, "compiled_code": "with \n\nbase as ( select * from `first-project-262802`.`stock_analysis`.`stg_nasdaq_history_base` )\n\n, first_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , symbol\n        , avg_daily_price as avg_daily_price_week_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number, symbol ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , symbol\n        , avg_daily_price as avg_daily_price_week_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number, symbol ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_week as \n(\n    select\n        year_full\n        , week_number\n        , symbol\n        , round(avg_daily_price_week_end - avg_daily_price_week_start,2) as avg_daily_price_movement_in_week\n        , round(((nullif(avg_daily_price_week_end,0)/nullif(avg_daily_price_week_start,0))-1)*100.00,2) as avg_daily_price_movement_in_week_pct\n    from base\n    left join first_avg_daily_price_per_week using (year_full, week_number, symbol)\n    left join last_avg_daily_price_per_week using (year_full, week_number, symbol)\n)\n\n\n\n\n\n\n-- select\n--     distinct *\n-- from base\n-- left join daily_price_movement_in_week using (year_full, week_number, symbol)\n\nselect * from daily_price_movement_in_week", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_nasdaq_weekly_price_movement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.343869Z", "completed_at": "2024-09-19T14:40:19.346241Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.346419Z", "completed_at": "2024-09-19T14:40:19.346422Z"}], "thread_id": "Thread-24", "execution_time": 0.0030460357666015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stg_all_nasdaq_stock_history", "compiled": true, "compiled_code": "with \n\nnasdaq_history_weekly_monthly_yearly_price as ( select * from `first-project-262802`.`stock_analysis`.`stg_nasdaq_history_weekly_monthly_yearly_price` )\n\n, nasdaq_weekly_price_movement as ( select * from `first-project-262802`.`stock_analysis`.`stg_nasdaq_weekly_price_movement` )\n\n, nasdaq_monthly_price_movement as ( select * from `first-project-262802`.`stock_analysis`.`stg_nasdaq_monthly_price_movement` )\n\n, nasdaq_yearly_price_movement as ( select * from `first-project-262802`.`stock_analysis`.`stg_nasdaq_yearly_price_movement` )\n\n\n\nselect\n    distinct *\nfrom nasdaq_history_weekly_monthly_yearly_price\nleft join nasdaq_weekly_price_movement using (year_full, week_number, symbol)\nleft join nasdaq_monthly_price_movement using (year_full, month_number, symbol)\nleft join nasdaq_yearly_price_movement using (year_full, symbol)", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_all_nasdaq_stock_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.348432Z", "completed_at": "2024-09-19T14:40:19.353812Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.354002Z", "completed_at": "2024-09-19T14:40:19.354005Z"}], "thread_id": "Thread-26", "execution_time": 0.006841182708740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.int_nasdaq", "compiled": true, "compiled_code": "-- with\n\n-- nasdaq_ticker_history as ( select * from `first-project-262802`.`stock_analysis`.`stg_all_nasdaq_stock_history` )\n\n-- , nasdaq_ticker_info as ( select * from `first-project-262802`.`stock_analysis`.`stg_all_nasdaq_stock_info` )\n\n-- select\n--     *\n-- from nasdaq_ticker_history\n-- left join nasdaq_ticker_info using (symbol)", "relation_name": "`first-project-262802`.`stock_analysis`.`int_nasdaq`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.352109Z", "completed_at": "2024-09-19T14:40:19.354371Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.354704Z", "completed_at": "2024-09-19T14:40:19.354707Z"}], "thread_id": "Thread-28", "execution_time": 0.006701946258544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.nasdaq", "compiled": true, "compiled_code": "with\n\nnasdaq_ticker_history as ( select * from `first-project-262802`.`stock_analysis`.`stg_all_nasdaq_stock_history` )\n\n, nasdaq_ticker_info as ( select * from `first-project-262802`.`stock_analysis`.`stg_all_nasdaq_stock_info` )\n\nselect\n    *\nfrom nasdaq_ticker_history\nleft join nasdaq_ticker_info using (symbol)", "relation_name": "`first-project-262802`.`stock_analysis`.`nasdaq`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.350256Z", "completed_at": "2024-09-19T14:40:19.354539Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.355027Z", "completed_at": "2024-09-19T14:40:19.355030Z"}], "thread_id": "Thread-27", "execution_time": 0.007421970367431641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.int_stock_analysis", "compiled": true, "compiled_code": "with\n\nspy as ( select * except (adj_close) from `first-project-262802`.`stock_analysis`.`stg_spy_1993_2024` )\n, spus as ( select * except (adj_close) from `first-project-262802`.`stock_analysis`.`stg_spus_2019_2024` )\n, hlal as ( select * except (adj_close) from `first-project-262802`.`stock_analysis`.`stg_hlal_2019_2024` )\n\n, nasdaq as ( select * except (adj_close) from `first-project-262802`.`stock_analysis`.`stg_all_nasdaq_stock_history` )\n\n\n\n\nselect * , 'SPY' as symbol from spy\nunion all\nselect * , 'SPUS' as symbol from spus\nunion all\nselect * , 'HLAL' as symbol from hlal\nunion all\n\nselect * except (symbol), symbol from nasdaq", "relation_name": "`first-project-262802`.`stock_analysis`.`int_stock_analysis`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-19T14:40:19.356076Z", "completed_at": "2024-09-19T14:40:19.358786Z"}, {"name": "execute", "started_at": "2024-09-19T14:40:19.358957Z", "completed_at": "2024-09-19T14:40:19.358959Z"}], "thread_id": "Thread-30", "execution_time": 0.003324270248413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stock_analysis.stock_analysis", "compiled": true, "compiled_code": "with\n\nstock_analysis as ( select * from `first-project-262802`.`stock_analysis`.`int_stock_analysis` )\n\n-- , symbols_meta as ( select * from `first-project-262802`.`stock_analysis`.`stg_symbols_meta` )\n\n, symbols_meta as ( select * from `first-project-262802`.`stock_analysis`.`stg_all_nasdaq_stock_info` )\n\nselect\n    *\nfrom stock_analysis\nleft join symbols_meta using (symbol)", "relation_name": "`first-project-262802`.`stock_analysis`.`stock_analysis`"}], "elapsed_time": 0.6274690628051758, "args": {"log_file_max_bytes": 10485760, "profiles_dir": "/Users/ahmed/.dbt", "show_resource_report": false, "write_json": true, "favor_state": false, "warn_error_options": {"include": [], "exclude": []}, "log_path": "/Users/ahmed/Desktop/dbt/stock_analysis/logs", "enable_legacy_logger": false, "printer_width": 80, "static_parser": true, "empty_catalog": false, "compile": true, "use_colors_file": true, "partial_parse_file_diff": true, "quiet": false, "partial_parse": true, "exclude": [], "require_resource_names_without_spaces": false, "defer": false, "use_colors": true, "which": "generate", "invocation_command": "dbt docs generate", "select": [], "log_level": "info", "log_format": "default", "populate_cache": true, "cache_selected_only": false, "log_level_file": "debug", "send_anonymous_usage_stats": true, "log_format_file": "debug", "static": false, "strict_mode": false, "vars": {}, "indirect_selection": "eager", "require_explicit_package_overrides_for_builtin_materializations": true, "print": true, "introspect": true, "project_dir": "/Users/ahmed/Desktop/dbt/stock_analysis", "source_freshness_run_project_hooks": false, "macro_debugging": false, "version_check": true}}