{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.2", "generated_at": "2024-09-03T16:40:28.821434Z", "invocation_id": "239e2137-447e-4bb7-9ad2-12df46cbd0a9", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:36:53.575348Z", "completed_at": "2024-09-03T16:36:53.586832Z"}, {"name": "execute", "started_at": "2024-09-03T16:36:53.587125Z", "completed_at": "2024-09-03T16:36:57.495287Z"}], "thread_id": "Thread-1", "execution_time": 3.920687198638916, "adapter_response": {"_message": "CREATE TABLE (146.1k rows, 29.8 MiB processed)", "code": "CREATE TABLE", "rows_affected": 146100, "bytes_processed": 31278432, "bytes_billed": 31457280, "location": "US", "project_id": "first-project-262802", "job_id": "8d891cc6-4a45-436d-b01b-189296a24136", "slot_ms": 8491}, "message": "CREATE TABLE (146.1k rows, 29.8 MiB processed)", "failures": null, "unique_id": "model.stock_analysis.base_calendar", "compiled": true, "compiled_code": "select \n    is_workday\n    , is_holiday\n    , is_holiday_leave\n    , a_date\n    , a_date as date\n    , extract(year from a_date) as year_of_date\n    , extract(month from a_date) as month_of_date\n    , extract(day from a_date) as day_of_date\n    , day_full\n    , day_full_capital_case\n    , day_full_lower_case\n    , day_abbrev\n    , is_weekday\n    , is_weekday_by_regex\n    , day_of_week\n    , day_of_month\n    , day_of_year\n    , week_of_month\n    , format_date('%W', a_date) as week_number\n    , trim(month_full) as month_full\n    , lower(trim(month_full)) as month_full_lower_case\n    , month_abbrev\n    , month_number\n    , quarter\n    , year_short\n    , year_full\n    , fiscal_quarter\n    , fiscal_year\n    , fiscal_year_full\n    , tomorrow\n    , one_week_later\n    , one_month_later\n    , three_months_later\n    , one_year_later\nfrom `first-project-262802`.`stock`.`400_years_of_generated_dates_and_holidays`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_calendar`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:36:57.499770Z", "completed_at": "2024-09-03T16:36:57.502682Z"}, {"name": "execute", "started_at": "2024-09-03T16:36:57.502917Z", "completed_at": "2024-09-03T16:37:00.661374Z"}], "thread_id": "Thread-1", "execution_time": 3.1625630855560303, "adapter_response": {"_message": "CREATE TABLE (1.2k rows, 55.5 KiB processed)", "code": "CREATE TABLE", "rows_affected": 1183, "bytes_processed": 56784, "bytes_billed": 10485760, "location": "US", "project_id": "first-project-262802", "job_id": "4f204195-9cf6-4322-9b37-4c58619fa7dd", "slot_ms": 5899}, "message": "CREATE TABLE (1.2k rows, 55.5 KiB processed)", "failures": null, "unique_id": "model.stock_analysis.base_spus_2019_2024", "compiled": true, "compiled_code": "select \n  date\n  , close_last\n  , volume\n  , open\n  , high\n  , low\nfrom `first-project-262802`.`stock`.`spus_2019_2024`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_spus_2019_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:37:00.668298Z", "completed_at": "2024-09-03T16:37:00.677535Z"}, {"name": "execute", "started_at": "2024-09-03T16:37:00.677983Z", "completed_at": "2024-09-03T16:37:03.908050Z"}], "thread_id": "Thread-1", "execution_time": 3.2413523197174072, "adapter_response": {"_message": "CREATE TABLE (8.0k rows, 372.8 KiB processed)", "code": "CREATE TABLE", "rows_affected": 7954, "bytes_processed": 381792, "bytes_billed": 10485760, "location": "US", "project_id": "first-project-262802", "job_id": "103ae779-9de6-4c32-ae6d-07c3d75adbe8", "slot_ms": 5787}, "message": "CREATE TABLE (8.0k rows, 372.8 KiB processed)", "failures": null, "unique_id": "model.stock_analysis.base_spy_1993_2024", "compiled": true, "compiled_code": "select \n  date\n  , close_last\n  , volume\n  , open\n  , high\n  , low\nfrom `first-project-262802`.`stock`.`spy_1993_2024`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_spy_1993_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:37:03.914573Z", "completed_at": "2024-09-03T16:37:03.917937Z"}, {"name": "execute", "started_at": "2024-09-03T16:37:03.918151Z", "completed_at": "2024-09-03T16:37:06.865286Z"}], "thread_id": "Thread-1", "execution_time": 2.952475070953369, "adapter_response": {"_message": "CREATE TABLE (2.5k rows, 118.0 KiB processed)", "code": "CREATE TABLE", "rows_affected": 2517, "bytes_processed": 120816, "bytes_billed": 10485760, "location": "US", "project_id": "first-project-262802", "job_id": "1ca32ff5-5929-4e23-9afe-d2c70508378a", "slot_ms": 5917}, "message": "CREATE TABLE (2.5k rows, 118.0 KiB processed)", "failures": null, "unique_id": "model.stock_analysis.base_spy_2014_2024", "compiled": true, "compiled_code": "select \n  date\n  , close_last\n  , volume\n  , open\n  , high\n  , low\nfrom `first-project-262802`.`stock`.`spy_2014_2024`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_spy_2014_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:37:06.870880Z", "completed_at": "2024-09-03T16:37:06.875483Z"}, {"name": "execute", "started_at": "2024-09-03T16:37:06.875844Z", "completed_at": "2024-09-03T16:37:09.995290Z"}], "thread_id": "Thread-1", "execution_time": 3.1258139610290527, "adapter_response": {"_message": "CREATE TABLE (8.0k rows, 0 processed)", "code": "CREATE TABLE", "rows_affected": 8049, "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "first-project-262802", "job_id": "7c48f938-96a1-407d-93fd-188449ecefcd", "slot_ms": 5392}, "message": "CREATE TABLE (8.0k rows, 0 processed)", "failures": null, "unique_id": "model.stock_analysis.base_symbols_meta", "compiled": true, "compiled_code": "select \n    'Nasdaq Traded' as is_nasdaq_traded\n    , 'Symbol' as symbol\n    , 'Security Name' as security_name\n    , 'Listing Exchange' as listing_exchange\n    , 'Market Category' as market_category\n    , 'ETF' as is_ETF\n    , 'Round Lot Size' as round_lot_size\n    , 'Test Issue' as is_test_issue\n    , 'Financial Status' as financial_status\n    , 'CQS Symbol' as cqs_symbol\n    , 'NASDAQ Symbol' as nasdaq_symbol\n    , 'NextShares' as nextshares\nfrom `first-project-262802`.`stock`.`symbols_valid_meta`", "relation_name": "`first-project-262802`.`stock_analysis`.`base_symbols_meta`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:37:10.003349Z", "completed_at": "2024-09-03T16:37:10.010996Z"}, {"name": "execute", "started_at": "2024-09-03T16:37:10.011331Z", "completed_at": "2024-09-03T16:37:16.046014Z"}], "thread_id": "Thread-1", "execution_time": 6.0442469120025635, "adapter_response": {"_message": "CREATE TABLE (146.1k rows, 35.6 MiB processed)", "code": "CREATE TABLE", "rows_affected": 146100, "bytes_processed": 37312108, "bytes_billed": 37748736, "location": "US", "project_id": "first-project-262802", "job_id": "d505d5fe-94de-476d-a420-f94fdc263bed", "slot_ms": 144066}, "message": "CREATE TABLE (146.1k rows, 35.6 MiB processed)", "failures": null, "unique_id": "model.stock_analysis.stg_calendar", "compiled": true, "compiled_code": "with \n\nbase_calendar as (select * from `first-project-262802`.`stock_analysis`.`base_calendar` )\n\n, adding_month_start_and_end as \n(\n    select\n        *\n        , case when day_of_date = 1 then TRUE else FALSE end as is_month_start\n        , case \n            when ( month_full = 'January' or month_full =  'March' or month_full = 'May' or month_full = 'July'or month_full = 'August' or month_full = 'October' or month_full = 'December') and day_of_date = 31 then TRUE \n            when ( month_full = 'April' or month_full =  'June' or month_full = 'September' or month_full = 'November' ) and day_of_date = 30 then TRUE \n            when month_full = 'February' and ( day_of_date = 28 or day_of_date = 29 ) then TRUE \n            else FALSE \n        end as is_month_end   \n    from base_calendar\n)\n\n, adding_quarter_start_and_end as \n(\n    select\n        *\n        , case \n            when ( month_full = 'January' or month_full =  'April' or month_full = 'July' or month_full = 'October') and is_month_start = TRUE then TRUE\n            else False\n        end as is_quarter_start\n        , case \n            when ( month_full = 'March' or month_full =  'June' or month_full = 'September' or month_full = 'December') and is_month_end = TRUE then TRUE\n            else False\n        end as is_quarter_end    \n    from adding_month_start_and_end\n)\n\n, adding_week_start_and_end as \n(\n    select\n        *\n        , case \n            when day_of_week = 1 then TRUE\n            else False\n        end as is_week_start\n        , case \n            when day_of_week = 7 then TRUE\n            else False\n        end as is_week_end\n        , case \n            when day_of_week = 1 then TRUE\n            else False\n        end as is_typical_trading_week_start\n        , case \n            when day_of_week = 5 then TRUE\n            else False\n        end as is_typical_trading_week_end\n    from adding_quarter_start_and_end\n)\n\n, base as (select * from adding_week_start_and_end )\n\n, adding_first_working_day_of_year as \n(\n    select\n        TRUE as is_first_working_day_of_year\n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date asc) = 1\n)\n\n, adding_last_working_day_of_year as \n(\n    select\n        TRUE as is_last_working_day_of_year\n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date desc) = 1\n)\n\n, adding_first_working_day_of_month as \n(\n    select\n        TRUE as is_first_working_day_of_month \n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_of_date ORDER BY date asc) = 1\n)\n\n, adding_last_working_day_of_month as \n(\n    select\n        TRUE as is_last_working_day_of_month \n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_of_date ORDER BY date desc) = 1\n)\n\n, adding_first_working_day_of_week as \n(\n    select\n        TRUE as is_first_working_day_of_week\n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_of_date, week_of_month ORDER BY date asc) = 1\n)\n\n, adding_last_working_day_of_week as \n(\n    select\n        TRUE as is_last_working_day_of_week\n        , *\n    from base\n    where is_workday = 1\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_of_date, week_of_month ORDER BY date desc) = 1\n)\n\n\nselect \n    base.*\n\n    , case when adding_first_working_day_of_year.is_first_working_day_of_year = TRUE then TRUE else FALSE end as is_first_working_day_of_year\n    , case when adding_last_working_day_of_year.is_last_working_day_of_year = TRUE then TRUE else FALSE end as is_last_working_day_of_year \n    \n    , case when adding_first_working_day_of_month.is_first_working_day_of_month = TRUE then TRUE else FALSE end as is_first_working_day_of_month\n    , case when adding_last_working_day_of_month.is_last_working_day_of_month = TRUE then TRUE else FALSE end as is_last_working_day_of_month\n    \n    , case when adding_first_working_day_of_week.is_first_working_day_of_week = TRUE then TRUE else FALSE end as is_first_working_day_of_week\n    , case when adding_last_working_day_of_week.is_last_working_day_of_week = TRUE then TRUE else FALSE end as is_last_working_day_of_week\n\nfrom base\nleft join adding_first_working_day_of_year using (date)\nleft join adding_last_working_day_of_year using (date)\nleft join adding_first_working_day_of_month using (date)\nleft join adding_last_working_day_of_month using (date)\nleft join adding_first_working_day_of_week using (date)\nleft join adding_last_working_day_of_week using (date)", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_calendar`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:37:16.054048Z", "completed_at": "2024-09-03T16:37:16.059156Z"}, {"name": "execute", "started_at": "2024-09-03T16:37:16.059597Z", "completed_at": "2024-09-03T16:37:18.807920Z"}], "thread_id": "Thread-1", "execution_time": 2.7552831172943115, "adapter_response": {"_message": "CREATE TABLE (8.0k rows, 495.2 KiB processed)", "code": "CREATE TABLE", "rows_affected": 8049, "bytes_processed": 507087, "bytes_billed": 10485760, "location": "US", "project_id": "first-project-262802", "job_id": "406f6fe4-f6f4-405a-a88b-a65c97b01203", "slot_ms": 3861}, "message": "CREATE TABLE (8.0k rows, 495.2 KiB processed)", "failures": null, "unique_id": "model.stock_analysis.stg_symbols_meta", "compiled": true, "compiled_code": "with \n\nsymbols_meta as ( select * from `first-project-262802`.`stock_analysis`.`base_symbols_meta` )\n\nselect \n    symbol\n    , security_name\n    , listing_exchange\n    , market_category\n    , is_ETF\nfrom symbols_meta", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_symbols_meta`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:37:18.810621Z", "completed_at": "2024-09-03T16:37:18.815487Z"}, {"name": "execute", "started_at": "2024-09-03T16:37:18.815757Z", "completed_at": "2024-09-03T16:37:44.208775Z"}], "thread_id": "Thread-1", "execution_time": 25.399168014526367, "adapter_response": {"_message": "CREATE TABLE (1.2k rows, 37.6 MiB processed)", "code": "CREATE TABLE", "rows_affected": 1183, "bytes_processed": 39414292, "bytes_billed": 39845888, "location": "US", "project_id": "first-project-262802", "job_id": "06e03b68-8d30-471d-b193-be067d13693b", "slot_ms": 474766}, "message": "CREATE TABLE (1.2k rows, 37.6 MiB processed)", "failures": null, "unique_id": "model.stock_analysis.stg_spus_2019_2024", "compiled": true, "compiled_code": "-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- --   DEPRACATED   -- -- -- -- --\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n\n\nwith \n\nstock as ( select * from `first-project-262802`.`stock_analysis`.`base_spus_2019_2024` )\n\n, calendar as ( select * from `first-project-262802`.`stock_analysis`.`stg_calendar` )\n\n, base as \n(\n    select \n        *\n        , round(((open + close_last + high + low)/4.00),2) as avg_daily_price\n    from stock\n    left join calendar using (date)\n)\n\n, weekly_price as \n(\n    select \n        year_full\n        , week_number\n        , round(avg(avg_daily_price),2) as avg_weekly_price\n    from base\n    group by 1,2\n)\n\n, monthly_price as \n(\n    select \n        year_full\n        , month_number\n        , round(avg(avg_daily_price),2) as avg_monthly_price\n    from base\n    group by 1,2\n)\n\n, yearly_price as \n(\n    select \n        year_full\n        , round(avg(avg_daily_price),2) as avg_yearly_price\n    from base\n    group by 1\n)\n\n\n\n\n, first_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_week as \n(\n    select\n        year_full\n        , week_number\n        , round(avg_daily_price_week_end - avg_daily_price_week_start,2) as avg_daily_price_movement_in_week\n        , round(((avg_daily_price_week_end/avg_daily_price_week_start)-1)*100.00,2) as avg_daily_price_movement_in_week_pct\n    from base\n    left join first_avg_daily_price_per_week using (year_full,week_number)\n    left join last_avg_daily_price_per_week using (year_full,week_number)\n)\n\n\n\n\n, first_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_month as \n(\n    select\n        year_full\n        , month_number\n        , round(avg_daily_price_month_end - avg_daily_price_month_start,2) as avg_daily_price_movement_in_month\n        , round(((avg_daily_price_month_end/avg_daily_price_month_start)-1)*100.00,2) as avg_daily_price_movement_in_month_pct\n    from base\n    left join first_avg_daily_price_per_month using (year_full,month_number)\n    left join last_avg_daily_price_per_month using (year_full,month_number)\n)\n\n\n\n\n\n\n, first_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_year as \n(\n    select\n        year_full\n        , round(avg_daily_price_year_end - avg_daily_price_year_start,2) as avg_daily_price_movement_in_year\n        , round(((avg_daily_price_year_end/avg_daily_price_year_start)-1)*100.00,2) as avg_daily_price_movement_in_year_pct\n    from base\n    left join first_avg_daily_price_per_year using (year_full)\n    left join last_avg_daily_price_per_year using (year_full)\n)\n\n\n\n\nselect\n    distinct *\nfrom base\nleft join weekly_price using (year_full,week_number)\nleft join monthly_price using (year_full,month_number)\nleft join yearly_price using (year_full)\nleft join daily_price_movement_in_week using (year_full,week_number)\nleft join daily_price_movement_in_month using (year_full,month_number)\nleft join daily_price_movement_in_year using (year_full)", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_spus_2019_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:37:44.218022Z", "completed_at": "2024-09-03T16:37:44.225994Z"}, {"name": "execute", "started_at": "2024-09-03T16:37:44.226634Z", "completed_at": "2024-09-03T16:39:36.915734Z"}], "thread_id": "Thread-1", "execution_time": 112.69963884353638, "adapter_response": {"_message": "CREATE TABLE (8.0k rows, 37.9 MiB processed)", "code": "CREATE TABLE", "rows_affected": 7954, "bytes_processed": 39739300, "bytes_billed": 39845888, "location": "US", "project_id": "first-project-262802", "job_id": "ddf48685-070c-4965-b82d-fcd2ee7c5c34", "slot_ms": 330630}, "message": "CREATE TABLE (8.0k rows, 37.9 MiB processed)", "failures": null, "unique_id": "model.stock_analysis.stg_spy_1993_2024", "compiled": true, "compiled_code": "with \n\nstock as ( select * from `first-project-262802`.`stock_analysis`.`base_spy_1993_2024` )\n\n, calendar as ( select * from `first-project-262802`.`stock_analysis`.`stg_calendar` )\n\n, base as \n(\n    select \n        *\n        , round(((open + close_last + high + low)/4.00),2) as avg_daily_price\n    from stock\n    left join calendar using (date)\n)\n\n, weekly_price as \n(\n    select \n        year_full\n        , week_number\n        , round(avg(avg_daily_price),2) as avg_weekly_price\n    from base\n    group by 1,2\n)\n\n, monthly_price as \n(\n    select \n        year_full\n        , month_number\n        , round(avg(avg_daily_price),2) as avg_monthly_price\n    from base\n    group by 1,2\n)\n\n, yearly_price as \n(\n    select \n        year_full\n        , round(avg(avg_daily_price),2) as avg_yearly_price\n    from base\n    group by 1\n)\n\n\n\n\n, first_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_week as \n(\n    select\n        year_full\n        , week_number\n        , round(avg_daily_price_week_end - avg_daily_price_week_start,2) as avg_daily_price_movement_in_week\n        , round(((avg_daily_price_week_end/avg_daily_price_week_start)-1)*100.00,2) as avg_daily_price_movement_in_week_pct\n    from base\n    left join first_avg_daily_price_per_week using (year_full,week_number)\n    left join last_avg_daily_price_per_week using (year_full,week_number)\n)\n\n\n\n\n, first_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_month as \n(\n    select\n        year_full\n        , month_number\n        , round(avg_daily_price_month_end - avg_daily_price_month_start,2) as avg_daily_price_movement_in_month\n        , round(((avg_daily_price_month_end/avg_daily_price_month_start)-1)*100.00,2) as avg_daily_price_movement_in_month_pct\n    from base\n    left join first_avg_daily_price_per_month using (year_full,month_number)\n    left join last_avg_daily_price_per_month using (year_full,month_number)\n)\n\n\n\n\n\n\n, first_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_year as \n(\n    select\n        year_full\n        , round(avg_daily_price_year_end - avg_daily_price_year_start,2) as avg_daily_price_movement_in_year\n        , round(((avg_daily_price_year_end/avg_daily_price_year_start)-1)*100.00,2) as avg_daily_price_movement_in_year_pct\n    from base\n    left join first_avg_daily_price_per_year using (year_full)\n    left join last_avg_daily_price_per_year using (year_full)\n)\n\n\n\n\nselect\n    distinct *\nfrom base\nleft join weekly_price using (year_full,week_number)\nleft join monthly_price using (year_full,month_number)\nleft join yearly_price using (year_full)\nleft join daily_price_movement_in_week using (year_full,week_number)\nleft join daily_price_movement_in_month using (year_full,month_number)\nleft join daily_price_movement_in_year using (year_full)", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_spy_1993_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:39:36.923156Z", "completed_at": "2024-09-03T16:39:36.928795Z"}, {"name": "execute", "started_at": "2024-09-03T16:39:36.929127Z", "completed_at": "2024-09-03T16:40:21.831832Z"}], "thread_id": "Thread-1", "execution_time": 44.90979194641113, "adapter_response": {"_message": "CREATE TABLE (2.5k rows, 37.6 MiB processed)", "code": "CREATE TABLE", "rows_affected": 2517, "bytes_processed": 39478324, "bytes_billed": 39845888, "location": "US", "project_id": "first-project-262802", "job_id": "c5f57b1f-7228-4377-b74c-db4a276bd6dc", "slot_ms": 255110}, "message": "CREATE TABLE (2.5k rows, 37.6 MiB processed)", "failures": null, "unique_id": "model.stock_analysis.stg_spy_2014_2024", "compiled": true, "compiled_code": "with \n\nstock as ( select * from `first-project-262802`.`stock_analysis`.`base_spy_2014_2024` )\n\n, calendar as ( select * from `first-project-262802`.`stock_analysis`.`stg_calendar` )\n\n, base as \n(\n    select \n        *\n        , round(((open + close_last + high + low)/4.00),2) as avg_daily_price\n    from stock\n    left join calendar using (date)\n)\n\n, weekly_price as \n(\n    select \n        year_full\n        , week_number\n        , round(avg(avg_daily_price),2) as avg_weekly_price\n    from base\n    group by 1,2\n)\n\n, monthly_price as \n(\n    select \n        year_full\n        , month_number\n        , round(avg(avg_daily_price),2) as avg_monthly_price\n    from base\n    group by 1,2\n)\n\n\n\n\n, first_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_week as \n(\n    select \n        year_full\n        , week_number\n        , avg_daily_price as avg_daily_price_week_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, week_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_week as \n(\n    select\n        year_full\n        , week_number\n        , round(avg_daily_price_week_end - avg_daily_price_week_start,2) as avg_daily_price_movement_in_week\n        , round(((avg_daily_price_week_end/avg_daily_price_week_start)-1)*100.00,2) as avg_daily_price_movement_in_week_pct\n    from base\n    left join first_avg_daily_price_per_week using (year_full,week_number)\n    left join last_avg_daily_price_per_week using (year_full,week_number)\n)\n\n\n\n\n, first_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_month as \n(\n    select \n        year_full\n        , month_number\n        , avg_daily_price as avg_daily_price_month_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date, month_number ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_month as \n(\n    select\n        year_full\n        , month_number\n        , round(avg_daily_price_month_end - avg_daily_price_month_start,2) as avg_daily_price_movement_in_month\n        , round(((avg_daily_price_month_end/avg_daily_price_month_start)-1)*100.00,2) as avg_daily_price_movement_in_month_pct\n    from base\n    left join first_avg_daily_price_per_month using (year_full,month_number)\n    left join last_avg_daily_price_per_month using (year_full,month_number)\n)\n\n\n\n\n\n\n, first_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_start\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date asc) = 1\n)\n\n, last_avg_daily_price_per_year as \n(\n    select \n        year_full\n        , avg_daily_price as avg_daily_price_year_end\n    from base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY year_of_date ORDER BY date desc) = 1\n)\n\n, daily_price_movement_in_year as \n(\n    select\n        year_full\n        , round(avg_daily_price_year_end - avg_daily_price_year_start,2) as avg_daily_price_movement_in_year\n        , round(((avg_daily_price_year_end/avg_daily_price_year_start)-1)*100.00,2) as avg_daily_price_movement_in_year_pct\n    from base\n    left join first_avg_daily_price_per_year using (year_full)\n    left join last_avg_daily_price_per_year using (year_full)\n)\n\n\n\n\nselect\n    distinct *\nfrom base\nleft join weekly_price using (year_full,week_number)\nleft join monthly_price using (year_full,month_number)\nleft join daily_price_movement_in_week using (year_full,week_number)\nleft join daily_price_movement_in_month using (year_full,month_number)\nleft join daily_price_movement_in_year using (year_full)", "relation_name": "`first-project-262802`.`stock_analysis`.`stg_spy_2014_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:40:21.836940Z", "completed_at": "2024-09-03T16:40:21.845963Z"}, {"name": "execute", "started_at": "2024-09-03T16:40:21.846361Z", "completed_at": "2024-09-03T16:40:25.607899Z"}], "thread_id": "Thread-1", "execution_time": 3.772334098815918, "adapter_response": {"_message": "CREATE TABLE (9.1k rows, 3.4 MiB processed)", "code": "CREATE TABLE", "rows_affected": 9137, "bytes_processed": 3556605, "bytes_billed": 20971520, "location": "US", "project_id": "first-project-262802", "job_id": "de1f6082-1062-46a1-9d6e-903196acae18", "slot_ms": 6623}, "message": "CREATE TABLE (9.1k rows, 3.4 MiB processed)", "failures": null, "unique_id": "model.stock_analysis.int_stock_analysis", "compiled": true, "compiled_code": "with\n\nspy as ( select * from `first-project-262802`.`stock_analysis`.`stg_spy_1993_2024` )\n\n, spus as ( select * from `first-project-262802`.`stock_analysis`.`stg_spus_2019_2024` )\n\nselect * , 'SPY' as symbol from spy\nunion all\nselect * , 'SPUS' as symbol from spus", "relation_name": "`first-project-262802`.`stock_analysis`.`int_stock_analysis`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-03T16:40:25.616461Z", "completed_at": "2024-09-03T16:40:25.623704Z"}, {"name": "execute", "started_at": "2024-09-03T16:40:25.624356Z", "completed_at": "2024-09-03T16:40:28.815866Z"}], "thread_id": "Thread-1", "execution_time": 3.200678825378418, "adapter_response": {"_message": "CREATE TABLE (9.1k rows, 3.9 MiB processed)", "code": "CREATE TABLE", "rows_affected": 9137, "bytes_processed": 4110560, "bytes_billed": 20971520, "location": "US", "project_id": "first-project-262802", "job_id": "f8c9c8a3-c3e8-4b8f-acc1-84e55293f77a", "slot_ms": 14492}, "message": "CREATE TABLE (9.1k rows, 3.9 MiB processed)", "failures": null, "unique_id": "model.stock_analysis.stock_analysis", "compiled": true, "compiled_code": "with\n\nstock_analysis as ( select * from `first-project-262802`.`stock_analysis`.`int_stock_analysis` )\n\n, symbols_meta as ( select * from `first-project-262802`.`stock_analysis`.`stg_symbols_meta` )\n\nselect\n    *\nfrom stock_analysis\nleft join symbols_meta using (symbol)", "relation_name": "`first-project-262802`.`stock_analysis`.`stock_analysis`"}], "elapsed_time": 216.3462529182434, "args": {"version_check": true, "log_format_file": "debug", "profiles_dir": "/Users/ahmed/.dbt", "partial_parse": true, "use_colors": true, "exclude": [], "log_file_max_bytes": 10485760, "vars": {}, "populate_cache": true, "source_freshness_run_project_hooks": false, "log_path": "/Users/ahmed/Desktop/dbt/stock_analysis/logs", "static_parser": true, "use_colors_file": true, "printer_width": 80, "quiet": false, "defer": false, "project_dir": "/Users/ahmed/Desktop/dbt/stock_analysis", "log_level": "info", "enable_legacy_logger": false, "require_resource_names_without_spaces": false, "strict_mode": false, "show_resource_report": false, "invocation_command": "dbt run --select stock_analysis", "send_anonymous_usage_stats": true, "partial_parse_file_diff": true, "cache_selected_only": false, "favor_state": false, "macro_debugging": false, "which": "run", "empty": false, "write_json": true, "indirect_selection": "eager", "select": ["stock_analysis"], "require_explicit_package_overrides_for_builtin_materializations": true, "log_level_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "log_format": "default", "print": true, "introspect": true}}