{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.2", "generated_at": "2025-06-11T01:08:07.252153Z", "invocation_id": "70c2da70-afe3-4b60-a97c-08c58c8fa861", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-11T01:07:44.869860Z", "completed_at": "2025-06-11T01:07:44.882228Z"}, {"name": "execute", "started_at": "2025-06-11T01:07:44.882561Z", "completed_at": "2025-06-11T01:08:07.246701Z"}], "thread_id": "Thread-1", "execution_time": 22.37799596786499, "adapter_response": {"_message": "CREATE TABLE (31.1m rows, 30.5 GiB processed)", "code": "CREATE TABLE", "rows_affected": 31120285, "bytes_processed": 32802645306, "bytes_billed": 32803651584, "location": "US", "project_id": "first-project-262802", "job_id": "5c140bc6-f0c6-4417-ad34-84943c6694d9", "slot_ms": 11201059}, "message": "CREATE TABLE (31.1m rows, 30.5 GiB processed)", "failures": null, "unique_id": "model.stock_analysis.stock_analysis", "compiled": true, "compiled_code": "\n\n\n\n-- select \n--     *    \n-- from `first-project-262802`.`stock_analysis`.`int_stock_analysis`\n\n\n\n\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n-- -- -- for unioning new data into main table  -- -- -- --\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n\n\n-- with\n\n-- new_data as (\n--     select * from stock_analysis.int_stock_analysis\n--     where date >= '2024-09-09'\n-- )\n\n-- , main_table as (\n--     select * from stock_analysis.stock_analysis\n--     where date < '2024-09-09'\n-- )\n\n-- select * from new_data\n-- union all\n-- select * from main_table\n\n\n\n\n\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n-- -- -- -- -- --   used for adhoc creation  -- -- -- -- --\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n\n-- select \n--     *\n\n--     -- -- -- , (high - low) as daily_price_high_low_range\n    \n--     -- -- -- , (open - close_last) as daily_price_open_close_range\n    \n--     -- -- -- , avg_daily_price - lag (avg_daily_price) over (partition by symbol order by date asc) as avg_daily_price_diff_day_over_day -- -- how much does the avg daily price change day over day\n\n--     -- -- -- , round( ( SAFE_DIVIDE( (avg_daily_price) , ( LAG(avg_daily_price) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) -1 ) *100.0,2) as avg_daily_price_diff_pct_day_over_day  -- -- avg daily price change as pct of previous avg daily price \n    \n    \n--     -- -- -- , ( ( open ) - ( LAG(close) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) as price_diff_of_open_to_close_of_previous_day\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( open ) , ( LAG(close) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_close_of_previous_day\n\n--     -- -- -- , ( ( close ) - ( LAG(close) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) as price_diff_of_close_to_close_of_previous_day\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( close ) , ( LAG(close) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_of_previous_day\n\n--     -- -- -- , ( ( high ) - ( LAG(close) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) as price_diff_of_high_to_close_of_previous_day\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( high ) , ( LAG(close) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_high_to_close_of_previous_day\n\n--     -- -- -- , ( ( low ) - ( LAG(close) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) as price_diff_of_low_to_close_of_previous_day\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( low ) , ( LAG(close) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_low_to_close_of_previous_day\n\n--     -- -- -- , LEAD(close,2) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_2_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,2) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_2_trading_days_in_advance\n\n--     -- -- -- , LEAD(close,3) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_3_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,3) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_3_trading_days_in_advance\n\n--     -- -- -- , LEAD(close,4) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_4_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,4) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_4_trading_days_in_advance\n    \n--     -- -- -- , LEAD(close,5) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_5_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,5) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_5_trading_days_in_advance\n\n--     -- -- -- , LEAD(close,10) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_10_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,10) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_10_trading_days_in_advance\n\n--     -- -- -- , LEAD(close,15) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_15_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,15) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_15_trading_days_in_advance\n\n--     -- -- -- , LEAD(close,20) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_20_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,20) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_20_trading_days_in_advance\n\n--     -- -- -- , LEAD(close,25) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_25_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,25) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_25_trading_days_in_advance\n\n--     -- -- -- , LEAD(close,30) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_30_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,30) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_30_trading_days_in_advance\n\n--     -- -- -- , LEAD(close,45) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_45_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,45) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_45_trading_days_in_advance\n\n--     -- -- -- , LEAD(close,60) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_60_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,60) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_60_trading_days_in_advance\n\n--     -- -- -- , LEAD(close,90) OVER (PARTITION BY symbol ORDER BY date ASC) - close as price_diff_of_close_to_close_90_trading_days_in_advance\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( LEAD(close,90) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( close ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_90_trading_days_in_advance\n\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( close ) , ( LAG(close,2) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_of_2_days_ago\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( close ) , ( LAG(close,3) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_of_3_days_ago\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( close ) , ( LAG(close,4) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_of_4_days_ago\n--     -- -- -- , round( ( ( SAFE_DIVIDE( ( close ) , ( LAG(close,5) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_close_to_close_of_5_days_ago\n\n\n\n\n\n--     -- -- -- ,  ( ( open ) - ( LAG(open) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) as price_diff_of_open_to_open_of_previous_day\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( open ) , ( LAG(open) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_of_previous_day\n\n--     -- -- -- ,  LEAD(open,2) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_2_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,2) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_2_trading_days_in_advance\n\n--     -- -- -- ,  LEAD(open,3) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_3_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,3) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_3_trading_days_in_advance\n\n--     -- -- -- ,  LEAD(open,4) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_4_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,4) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_4_trading_days_in_advance\n    \n--     -- -- -- ,  LEAD(open,5) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_5_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,5) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_5_trading_days_in_advance\n\n--     -- -- -- ,  LEAD(open,10) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_10_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,10) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_10_trading_days_in_advance\n\n--     -- -- -- ,  LEAD(open,15) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_15_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,15) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_15_trading_days_in_advance\n\n--     -- -- -- ,  LEAD(open,20) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_20_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,20) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_20_trading_days_in_advance\n\n--     -- -- -- ,  LEAD(open,25) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_25_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,25) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_25_trading_days_in_advance\n\n--     -- -- -- ,  LEAD(open,30) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_30_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,30) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_30_trading_days_in_advance\n\n--     -- -- -- ,  LEAD(open,45) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_45_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,45) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_45_trading_days_in_advance\n\n--     -- -- -- ,  LEAD(open,60) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_60_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,60) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_60_trading_days_in_advance\n\n--     -- -- -- ,  LEAD(open,90) OVER (PARTITION BY symbol ORDER BY date ASC) - open as price_diff_of_open_to_open_90_trading_days_in_advance\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( LEAD(open,90) OVER (PARTITION BY symbol ORDER BY date ASC) ) , ( open ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_90_trading_days_in_advance\n\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( open ) , ( LAG(open,2) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_of_2_days_ago\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( open ) , ( LAG(open,3) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_of_3_days_ago\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( open ) , ( LAG(open,4) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_of_4_days_ago\n--     -- -- -- ,  round( ( ( SAFE_DIVIDE( ( open ) , ( LAG(open,5) OVER (PARTITION BY symbol ORDER BY date ASC) ) ) ) -1 ) * 100.00,2) as price_diff_pct_of_open_to_open_of_5_days_ago\n\n\n\n-- from stock_analysis.stock_analysis\n\n\n\n\n\n\n\n\nwith base as \n(\n    select \n        * \n    from stock_analysis.stock_analysis\n)\n\n-- -- -- got the following from here: https://medium.com/google-cloud/how-to-calculate-technical-indicators-in-bigquery-using-sql-moving-averages-rsi-macd-b58b16e4f52e\n\n, prices AS (\n  SELECT \n    symbol,\n    date,\n    open,\n    high,\n    low,\n    close,\n    volume,\n    AVG(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7,\n    AVG(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS ma30,\n    AVG(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 99 PRECEDING AND CURRENT ROW) AS ma100,\n    AVG(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 199 PRECEDING AND CURRENT ROW) AS ma200,\n    SUM(CASE WHEN close > open THEN close - open ELSE 0 END) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 13 PRECEDING AND CURRENT ROW) AS gain_14,\n    SUM(CASE WHEN open > close THEN open - close ELSE NULL END) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 13 PRECEDING AND CURRENT ROW) AS loss_14,\n    SUM(CASE WHEN close > open THEN close - open ELSE 0 END) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 23 PRECEDING AND CURRENT ROW) AS gain_24,\n    SUM(CASE WHEN open > close THEN open - close ELSE NULL END) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 23 PRECEDING AND CURRENT ROW) AS loss_24,\n    MAX(high) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 23 PRECEDING AND CURRENT ROW) AS highest,\n    MIN(low) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 23 PRECEDING AND CURRENT ROW) AS lowest,\n    (AVG(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) - AVG(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 23 PRECEDING AND CURRENT ROW)) AS macd\n  FROM base\n)\n\n, indicators AS (\n  SELECT \n    symbol,\n    close,\n    volume,\n    date,\n    ma7,\n    ma30,\n    ma100,\n    ma200,\n    (100 - (100 / (1 + (gain_14 / loss_14)))) AS rsi_14,\n    (100 - (100 / (1 + (gain_24 / loss_24)))) AS rsi_24,\n    macd,\n    (CASE WHEN STDDEV_POP(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 23 PRECEDING AND CURRENT ROW) = 0 THEN NULL ELSE ((close - AVG(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 23 PRECEDING AND CURRENT ROW)) / STDDEV_POP(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 23 PRECEDING AND CURRENT ROW)) END) AS bollinger_band\n  FROM prices\n)\n\n, final_indicator_values as (\nSELECT \n  symbol,\n--   close,\n--   volume,\n  date,\n  ma7,\n  ma30,\n  ma100,\n  ma200,\n  rsi_14,\n  rsi_24,\n  macd,\n  bollinger_band,\n  ABS(ma200 - close) ma200_reach,\n  ABS(ma100 - close) ma100_reach,\n  ABS(ma30 - close) ma30_reach,\n  ABS(ma7 - close) ma7_reach\nFROM indicators\n)\n\n\nselect \n    *\nfrom base\nleft join final_indicator_values using (symbol, date)\norder by symbol, date", "relation_name": "`first-project-262802`.`stock_analysis`.`stock_analysis`"}], "elapsed_time": 23.504604816436768, "args": {"project_dir": "/Users/ahmed/Desktop/dbt/stock_analysis", "use_colors_file": true, "cache_selected_only": false, "defer": false, "strict_mode": false, "vars": {}, "log_level": "info", "print": true, "select": ["stock_analysis.sql"], "static_parser": true, "invocation_command": "dbt run --select stock_analysis.sql", "log_path": "/Users/ahmed/Desktop/dbt/stock_analysis/logs", "log_level_file": "debug", "which": "run", "version_check": true, "enable_legacy_logger": false, "macro_debugging": false, "partial_parse_file_diff": true, "empty": false, "profiles_dir": "/Users/ahmed/.dbt", "require_resource_names_without_spaces": false, "show_resource_report": false, "partial_parse": true, "printer_width": 80, "favor_state": false, "populate_cache": true, "log_file_max_bytes": 10485760, "source_freshness_run_project_hooks": false, "use_colors": true, "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "introspect": true, "warn_error_options": {"include": [], "exclude": []}, "quiet": false, "send_anonymous_usage_stats": true, "log_format_file": "debug", "exclude": [], "indirect_selection": "eager", "log_format": "default"}}